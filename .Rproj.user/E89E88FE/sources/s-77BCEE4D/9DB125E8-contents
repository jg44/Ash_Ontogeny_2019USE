
.anyshape <- function(sides, rotation, radius=1, makeplot=FALSE, col="light blue"){
    xx=seq(0,2*pi, .01)
    if (makeplot) .plot(radius*cos(xx), radius*sin(xx))
    x <- seq(pi/2,2*pi+pi/2, 2*pi/sides)

    if (sides %%2 == 0) { x <- seq(pi/2 - pi/sides, 2*pi+pi/2 - pi/sides,  2*pi/sides)}
    # sides=3

    polygon(radius*cos(x), radius*sin(x), col=col)
    #points(radius*cos(x), radius*sin(x), col=1:sides, pch=19, cex=2)
}



.bellcurve <- function(mean=0, sd=1, w=3.5){
  x <- seq(mean-w*sd, mean+w*sd, length.out = 1000 )
  y <- dnorm(x, mean=mean, sd=sd)
  return(data.frame(x,y))
}

.plotbell <- function(mean=0, sd=1, w=3.5, col=4, lwd=2){
  points(.bellcurve(mean, sd, w), col=col, lwd=lwd, type="l")
}

.bL <- function() {box(bty="L", lwd=2)}

.tolength <- function(xx, l){
    tmp <- rep(xx, l%/%length(xx))
    if (length(tmp)<l) tmp <- c(tmp, xx[1:(l%%length(xx))])
    #print(tmp)
    return(tmp)
}



shapes <- function(x, y, sides=1000, size=10, rot=0, lwd=1, lty=1, fill=0, border=1){
    l<-length(x)
    rot <- .tolength(rot, l)
    sides <- .tolength(sides, l)
    sides[-which(sides %in% 1:15)]<-1001
    rot[sides==1] <- 180
    rot[sides==2] <- 45
    sides[sides==1] <- 3
    sides[sides==2] <-4
    sides[sides==0] <- 1000
    half <- rep(2, l)
    half[sides %in% 16:19] <- 1
    rot[sides==16] <- 45
    rot[sides==17] <- 90
    rot[sides==18] <- 180
    rot[sides==19]  <- 270
    sides[sides %in% 16:999]<-1000
    #print(sides)
    print(rot)
    for (i in 1:l) {
        shape(x[i],y[i], sides[i],.tolength(size,l)[i],  rot[i],  .tolength(lwd,l)[i],
              .tolength(lty,l)[i], .tolength(fill, l)[i], .tolength(border,l)[i], half[i])
    }

}


shape <- function(x, y, sides=1000, size=10, rot=0, lwd=1, lty=1, fill=0, border=1, half=2){
    tur <- sides/2 + sides*rot/180
    print(rot)
    if (sides %in% 16:19) tur <- 2*rot/180

    x1 <- cos(seq(tur*pi/sides,half*pi+tur*pi/sides, length.out = sides+1)[-(sides+1)])*size/10
    y1 <- sin(seq(tur*pi/sides, half*pi+tur*pi/sides, length.out = sides+1)[-(sides+1)])*size/10
    # data.frame(x1,y1)[1,]
    # points(x+x1, y+y1)
    polygon(x+x1, y+y1, lwd=lwd, lty=lty, col=fill, border=border)
    #points(x+x1, y+y1, col=1:6)
}


rotateNodes <- rotateNodes<-function(tree,nodes,polytom=c(1,2),...){
    n<-length(tree$tip.label)
    if(nodes[1]=="all") nodes<-1:tree$Nnode+n
    for(i in 1:length(nodes))
        tree<-rotate(tree,nodes[i],polytom)
    if(hasArg(reversible)) reversible<-list(...)$reversible
    else reversible<-TRUE
    if(reversible){
        ii<-which(tree$edge[,2]<=n)
        jj<-tree$edge[ii,2]
        tree$edge[ii,2]<-1:n
        tree$tip.label<-tree$tip.label[jj]
    }
    return(tree)
}

# install.packages("dplyr")
.pathPrep <- function(path = "clipboard") {
  y <- if (path == "clipboard") {
    readClipboard()
  } else {
    cat("Please enter the path:\n\n")
    readline()
  }
  x <- chartr("\\", "/", y)
  writeClipboard(x)
  return(x)
}

.openRprofile()


.openRprofile <- function() {
    browseURL("C:/Program Files/R/R-3.4.2/etc/")
    print("Open as admistrator in notepad...")

}

.add_legend <- function(...) {
  opar <- par(fig=c(0, 1, 0, 1), oma=c(0, 0, 0, 0),
    mar=c(0, 0, 0, 0), new=TRUE)
  on.exit(par(opar))
  plot(0, 0, type='n', bty='n', xaxt='n', yaxt='n')
  legend(...)
}


.setwdFileLoc <- function(tf) {
  tmp<- strsplit(tf, "/")[[1]]
  setwd(paste(tmp[-length(tmp)], sep="/", collapse="/"))
  return(getwd())
}



.read.csv.dt<-function(file, datadir= "./data/", sep=",", header=TRUE){
    require(data.table)
    ff<- "ajf/sgs/"
    if (length(grep("/", ff))==0) file <- paste0(datadir, file)
    tmp <- data.table(read.csv(file, sep=sep, header=header, fileEncoding="UTF-8-BOM"))
}

.ci95 <- function(x){
   error <- qt(0.975,df=length(x)-1)*sd(x)/sqrt(length(x))
   return(c(mean(x)-error, mean(x)+error))
}

.trimSpaces <- function (x) gsub("^\\s+|\\s+$", "", x)


.fileNotes <- function(dirCode="./Code", drop=FALSE){  ## use this file to store metadata about all the project files.  Use .fileNav to navigate and open them.
require(data.table)
   tmp <- list.files(dirCode, pattern ='.R$|.Rmd$', ignore.case = TRUE)
   if (!exists("fileNotes")) fileNotes <- data.table(filenames=tmp, notes=gsub(".r$|.rmd$", "", tmp, ignore.case = TRUE), path=dirCode, notes2="")
   #update fileNotes
   tmp <-    list.files(dirCode, pattern ='.R$|.Rmd$', ignore.case = TRUE)[is.na(match( list.files(dirCode, pattern ='.R$|.Rmd$', ignore.case = TRUE), fileNotes$filenames))]
   if (length(tmp)>0) fileNotes <-
      rbind(fileNotes, data.table(filenames=tmp, notes=gsub(".r$|.rmd$", "", tmp, ignore.case = TRUE), path=dirCode, notes2="") )
   print(fileNotes)
}

.fileNav <- function(x="MASTERFILE", fileN=fileNotes){
    # function to open files listed in masterfile (must be named MF)
    if (!exists("fileN")) print("No fileNotes variable");
    wh <- grep(x, fileN$notes, ignore.case = TRUE)
    if (length(wh)==0) print("No match") else if
        (length(wh)>1) {
            cat("More than one matching file:\n\n " );
            print(fileN[wh,])} else {
               fn <- fileN[wh, paste0(path,"/",filenames)]
               browseURL(fn)
               }
}


# for (i in 1:nrow(fileNotes)){
#       if (!(fileNotes$filenames[i] %in% list.files(fileNotes$path[i]))) fileNotes$notes2<-
#             "missing or moved"
#          }
#
# assign("fileNotes", fileNotes[order(filenames),], envir = .GlobalEnv)
# # return()
# }
#
# .fileNav("1log")
#


.mf<-function(x="MASTERFILE", tmpMF=MF){
    # function to open files listed in masterfile (must be named MF)
    if (!exists("tmpMF")) print("Invalid masterfile")
    wh <- grep(x, names(tmpMF), ignore.case = TRUE)
    if (length(wh)==0) print("No match") else if
        (length(wh)>1) {
            cat("More than one matching file:\n\n " );
            print(tmpMF[grep(x, names(MF), ignore.case = TRUE)])} else
        .bu(MF[grep(x, names(tmpMF), ignore.case = TRUE)])
}

get_user <- function()
{
  env <- if(.Platform$OS.type == "windows") "USERNAME" else "USER"
  unname(Sys.getenv(env))
}

get_user()

.assign_with_metadata <- function(x, value, ..., pos = parent.frame(), inherits = FALSE)
{
  attr(value, "creator") <- get_user()
  attr(value, "time_created") <- Sys.time()
  more_attr <- list(...)
  attr_names <- names(more_attr)
  for(i in seq_along(more_attr))
  {
    attr(value, attr_names[i]) <- more_attr[[i]]
  }
  assign(x, value, pos = pos, inherits = inherits)
}

.rd.csv <- function(varname, src, makefile=NULL, notes=NULL){
    require(data.table)
    .assign_with_metadata(eval(varname), data.table(.cleannames(read.csv(src))), source=src, makefile=makefile, notes=notes, pos=globalenv())
}

#
#
# attributes(xx)
# .rd.csv("xx, "/Users/jeff/Dropbox/katie_data/MasterFile_larvaeall.csv", makefile = thisfile, notes = "larv17 is the authoritative larvae variable but may contain unusable records")
.imptVars<-function(printattr=FALSE, lss=ls(globalenv()), notesOnly=TRUE ) {
    impVar<-c()
    impattr<-list(); j=0
    for (i in 1:length(lss)) {
        tmp <- attributes( eval(parse(text=lss[i])) )
        if (!is.null(tmp$creator)) {
            j=1+j
            impattr[[j]] <- tmp
            impVar <- c(impVar, lss[i])
            }
    }
    if (printattr) {
        if (notesOnly) return(data.table(impVar, notes=
                sapply(impattr, "[[", "notes"))) else return(impattr) } else
                    return(impVar)
}


 # sapply(ls(), FUN=function(x) attributes(eval(parse(text=x))))


.write.csv<-function(df, wd=getwd(), file){
    write.csv(df, paste(wd, file, sep="/"))
}
.read.csv<-function(wd=getwd(), file){
    read.csv(paste(wd, file, sep="/"))
}

##
x=10
.roundup<-function(x, increm=1) {
    return(
    trunc(x / increm)*increm + ifelse((x %% increm)>0, increm, 0)
    )
}

x=-7000:2010; breakby=10
# .bin(x, breakby=10)
.bin<-function(x, minx=NULL, maxx=NULL, breakby=NULL, breaks=NULL, breakcount=10)   {
        if (is.null(minx)) minx<-floor(min(x))
    if (is.null(maxx)) maxx<-ceiling(max(x))
      if (is.null(breaks)) {
        if (!is.null(breakby)) {
            breaks <- seq(minx, .roundup(maxx, increm=breakby) + ifelse(minx>0, minx,0), breakby)
            }
        if (is.null(breakby)) {
            breakby<-(maxx - minx )/breakcount
            breaks <- seq(minx, (.roundup(maxx,
                breakby)+minx)*breakby, breakby)
        }
      }
   index<-.bincode(x, breaks = breaks, include.lowest = TRUE, right=TRUE)
   range <- paste(breaks[-length(breaks)], breaks[-1], sep="-")
   midpoint <- breaks[-length(breaks)]+diff(breaks)/2
   return( list(data.frame(x, index, midpoint=midpoint[index], range=range[index]),
       data.frame(index=1:length(midpoint), midpoint, range) ) )
}

# .bin(x=1:13, breakby=3)


.groups <- function(groups=3, N, letterslength=26, countchars=2) {
    reps<-trunc(N/groups) + N %% groups
    df<-data.frame(LETTERS[1:letterslength], LETTERS[1:letterslength])
    trts<-apply(expand.grid(df), 1, paste, collapse="")[1:groups]
    return(
        sample(c(rep(trts, each=N/groups),
    sample(trts, N %% groups, replace = TRUE)), N)
        )
}

.rbind0<-function(x, y){
    df<-data.frame(x=names(x), y=names(y))
    namez<-with(df, paste(x,y, sep="."))
    names(x)<-namez; names(y)<-namez
    return(rbind(x,y))
}


.ordercols<-function(namesord,x){
    m<-match(namesord,names(x))
    return(x[,c(m, (1:ncol(x))[-m])])
}

.capwords <- function(s, strict = FALSE) {
    cap <- function(s) paste(toupper(substring(s, 1, 1)),
                  {s <- substring(s, 2); if(strict) tolower(s) else s},
                             sep = "", collapse = " " )
    sapply(strsplit(s, split = " "), cap, USE.NAMES = !is.null(names(s)))
}


# x=sitedeets$site1 caps=c(14)
.title<-function(x, caps=NULL, allcaps=NULL){
    x <- gsub("[\r\n]", " ", x)
    x <- gsub("^\\s+|\\s+$", "", x)
    x1 <- strsplit(x, " ")[[1]]
   if (is.null(caps)) print(as.data.frame(x1)) else {
    x1 <- tolower(x1)
    for (i in c(1, caps)) {x1[i] <- .capwords(x1[i], strict = TRUE)}
    if (!is.null(allcaps)) { for (i in allcaps){ x1[i]<-strsplit(x, " ")[[1]][i]}
    }
    x2 <- (paste(x1, collapse = " "))
    sink("outfile1.txt")
    cat(x2)
    sink()
    file.show("outfile1.txt")
    }}


.leadingzeros<-function(x, addchar="X", addnum="0"){
    nums<-as.numeric(regmatches(x, gregexpr("[0-9]+", x)))
    m<-max(nchar(nums))
    numschar <- as.character(nums)
    while (any(nchar(numschar) < m))
        numschar[nchar(numschar) < m] <-
            paste0(addnum, numschar[nchar(numschar) < m])
    sub("[A-Z]", "", x)
    charvec <- unlist(
        regmatches(tolower(x),
            gregexpr("[A-Z]+", x)
            )
        )
    m1 <- max(nchar(charvec))
    if (!is.null(addchar)) {
    while (any(nchar(charvec) < max(nchar(charvec))))
        charvec[nchar(charvec) < m1] <- paste0(charvec[nchar(charvec) < m1], addchar)
    }
    return(paste0(toupper(charvec), numschar))
}


.as.data.frame.summary.aovlist <- function(x) {
   if(length(x) == 1) {
     as.data.frame(x[[1]])
   } else {
     lapply(unlist(x, FALSE), as.data.frame)
   }
}

.opendir<-function(path=getwd()){
print(data.frame(dir=list.dirs()[-grep(".Rproj", list.dirs())]))
op<-as.numeric(readline("Directory #:  "))
pathtofile<-paste0(path, "/",list.dirs(full.names = FALSE)[-grep(".Rproj", list.dirs())][op], "/")
print(pathtofile)
.bu(pathtofile)
}

.rangeoutput<-function(range, suffix=NULL){
    if (is.null(suffix)) suffix <- "" else suffix <- paste0(" ", suffix)
    paste0(range[-length(range)], "-", range[-1], suffix)
}


.MakeNewProject<-function(projname, path="~/Documents/R/projects2017/", openproject=FALSE){
   path1<-paste0(path, projname, "/")
      if (!dir.exists(path1)) dir.create(path1)
  ask <- readline(paste0("Copy GarnasModifiedProjectTemplate-master to ", path, "? (y/n)  "))
   if (tolower(ask)=="y") {

      system(paste("cp -r", '/Users/jeff/Dropbox/R/GarnasModifiedProjectTemplate-master/*',  path1))
      system(paste("mv", paste0(path1, "InsertProjectNameHere.Rproj"), paste0(path1, projname,".Rproj")))
      #path1<-"/Users/jeff/Documents/R/projects2017/testdelete/"
    list.dirs()
      if (openproject) browseURL(paste0(path1, projname,".Rproj")) else {
         browseURL(paste0(path1))
         print("\nProject created. Save current project and open, or switch over. \n")
      }

#    Sys.sleep(13)
#       browseURL(paste0(path1, "README.md"))
#     Sys.sleep(1)
#       browseURL(paste0(path1, "MASTERFILE.R"))
         } else print("Exiting -- change path")
}



.signif<-function(x) {
   ret<-rep("", length(x))
   ret[x<=0.1]<-"."
   ret[x<=0.05]<-"*"
   ret[x<=0.01]<-"**"
   ret[x<=0.001]<-"***"
   ret[x<=0.0001]<-"****"
   return(ret)
}

.getfile<-function(uniq=T, changepath=FALSE, diruse=getwd(), filter=".r"){
      lets<-c('couldnotpossiblybehere')
      if (changepath) diruse<-getwd()
      lets<-readline("Type some letters from the filename (n to break):  ")
      if (lets!="n") {
      if (length(list.files(ignore.case = T, pattern="\\.r$")[grep(ignore.case=T,lets, list.files(ignore.case = T, pattern="\\.r$"))])==1) ret<-
         paste(sep="/",getwd(), list.files(ignore.case = T, pattern="\\.r$")[grep(ignore.case=T,as.character(lets), list.files(ignore.case = T, pattern="\\.r$"))])
      if (length(list.files(ignore.case = T, pattern="\\.r$")[grep(ignore.case=T,lets, list.files(ignore.case = T, pattern="\\.r$"))])>1) {
         print(data.frame(filenames=list.files(ignore.case = T, pattern="\\.r$")[grep(ignore.case=T,lets, list.files(ignore.case = T, pattern="\\.r$"))]))
         ll<-as.numeric(readline("Type the # of the file:  "))
         ret<-paste(sep="/",getwd(), list.files(ignore.case = T, pattern="\\.r$")[grep(ignore.case=T,lets, list.files(ignore.case = T, pattern="\\.r$"))][ll] )
}
      if (length(list.files(ignore.case = T,
         pattern="\\.r$")[grep(ignore.case=T,lets,
            list.files(ignore.case = T, pattern="\\.r$"))])==0) ret<-
            file.choose()
       return(ret)
      }
}

# pdffile<- "./graphs/BW_VS_Adj Morphospecies by family host.pdf"

.pdf2png <- function(pdffile){
  pdffile <- gsub("/", "\\\\", pdffile)
  pngfile <- gsub(".pdf", ".png", pdffile)
  x <- paste0('"C:/Program Files/ImageMagick-7.0.8-Q16/magick.exe" convert -density 288 "', pdffile, '" -resize 25% "', pngfile)
  system(x)
  print(pngfile)
  }

.devpdf <- function(file, wd="./graphs", open=TRUE, overwrite=FALSE, png=FALSE, tf=NULL, meta=FALSE){
  require("rstudioapi")
  tf <- rstudioapi::getActiveDocumentContext()$path
  if (is.null(wd)) wd=getwd()
  if ((meta) && (is.null(tf))) tf<-.getfile()
  ff<-paste(wd,"/",file,".pdf",sep="")
  ff<-gsub('//', '/', ff)  ## interior spaces
  ff<-gsub('.pdf.pdf', '.pdf', ff)
  if ((overwrite) || (!(file.exists(ff)))) dev.copy2pdf(file=ff) else
    if (overwrite) { print("File already exists.  Opening existing file.")
      ff<-paste(wd,"/",file,format(Sys.time(), "%Y%m%dhr%H"),".pdf",sep="_")
      dev.copy2pdf(file=ff)}
  if (open) browseURL(ff)
  if (png) {
    .pdf2png(ff)
    # system(paste("mkdir '",wd, "/png_version/'", sep=""))
    # ff <- gsub("/", "\\\\", ff)
    # fng <- gsub(".pdf", ".png", ff)
    # fn<-strsplit(ff, "/")[[1]][length(strsplit(ff, "/")[[1]])]
    # #pngpath<-paste(wd, "/png_version/", sep="")
    # #x<-paste("sips -s format png '", ff, "' --out '", pngpath, substring(fn, 1, nchar(fn)-4), ".png'", sep="")
    # x <- paste0('"C:/Program Files/ImageMagick-7.0.8-Q16/magick.exe" convert -density 288 "', ff, '" -resize 25% "', fng)
    # system(x)
  }
  if ((meta) && (tf!="n")) {
    sink(paste0(ff, ".metadata.txt"))
    cat("Script file:  ")
    cat(paste0("\nMade by: ", tf))
    cat("\n")
    cat("Approximate line: ", readline("Approx. line? "))
    cat("\nNotes: ", readline("Notes? "))
    cat("\nFigure #: ", readline("Figure #: "))
    cat("\nTimestamp: ", date())
    .sinkall()
  }
  print(ff)
}
# old version for mac
# .devpdf<-function(file, wd="./graphs", open=TRUE, overwrite=FALSE, png=FALSE, tf=NULL, meta=TRUE){
#     require("rstudioapi")
#     tf <- rstudioapi::getActiveDocumentContext()$path
#       if (is.null(wd)) wd=getwd()
#       if ((meta) && (is.null(tf))) tf<-.getfile()
#          ff<-paste(wd,"/",file,".pdf",sep="")
#          ff<-gsub('//', '/', ff)  ## interior spaces
#          ff<-gsub('.pdf.pdf', '.pdf', ff)
#          if ((overwrite) || (!(file.exists(ff)))) dev.copy2pdf(file=ff) else
#             if (overwrite) { print("File already exists.  Opening existing file.")
#                 ff<-paste(wd,"/",file,format(Sys.time(), "%Y%m%dhr%H"),".pdf",sep="_")
#                 dev.copy2pdf(file=ff)}
#          if (open) browseURL(ff)
#          if (png) {
#                system(paste("mkdir '",wd, "png_version/'", sep=""))
#                fn<-strsplit(ff, "/")[[1]][length(strsplit(ff, "/")[[1]])]
#                pngpath<-paste(wd, "png_version/", sep="")
#                x<-paste("sips -s format png '", ff, "' --out '", pngpath, substring(fn, 1, nchar(fn)-4), ".png'", sep="")
#                system(x) }
#          if ((meta) && (tf!="n")) {
#             sink(paste0(ff, ".metadata.txt"))
#             cat("Script file:  ")
#             cat(paste0("\nMade by: ", tf))
#             cat("\n")
#             cat("Approximate line: ", readline("Approx. line? "))
#             cat("\nNotes: ", readline("Notes? "))
#             cat("\nFigure #: ", readline("Figure #: "))
#             cat("\nTimestamp: ", date())
#             .sinkall()
#          }
#          print(ff)
# }


.devtext<-function(file, wd="./graphs", open=TRUE, overwrite=TRUE, tf=NULL, meta=TRUE, header=""){
    require("rstudioapi")
    #file="kk"
    tf <- rstudioapi::getActiveDocumentContext()$path
      if (is.null(wd)) wd=getwd()
      # if ((meta) && (is.null(tf))) tf<-.getfile()
         ff<-paste(wd,"/",file,".txt",sep="")
         ff<-gsub('//', '/', ff)  ## interior spaces
         ff<-gsub('.txt.txt', '.txt', ff)

        if (!(overwrite)) { print("File already exists."); break } else  sink(paste0(ff, ".metadata.txt"))
         # if ((overwrite) || (!(file.exists(ff)))) dev.copy2pdf(file=ff) else
                    # ff<-paste(wd,"/",file,format(Sys.time(), "%Y%m%dhr%H"),".pdf",sep="_")
         # if (open) browseURL(ff)
         # if (meta)  .sinktext(addMeta = meta)
cat(header,"\n__________________\n\n")
cat("Source script: ", tf,"\n")
return(paste0(ff, ".metadata.txt"))

         }


.sinktext<-function(file=NULL, addMeta=TRUE, notes, open=TRUE){
        cat("\n", notes,"\n_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_\n")
        # cat("Source script: ", tf,"\n")
        if (addMeta){
            cat("Approximate line: ", readline("Approx. line? "))
            cat("\nNotes: ", readline("Notes? "))
            cat("\nFigure #: ", readline("Figure #: "))
            cat("\nVersion: ", readline("Version: "))
            cat("\nFinal (y/n): ", readline("Final: ")) }

            .sinkall()
        browseURL(file)
}


.sinkall <- function() while (sink.number()>0) { sink() }



.meansd<-function(x, rnd=1, se=F, nospace=F){
   med<-paste0("median = ",fivenum(x)[3],"; range = {",range(x)[1], ",",range(x)[2],"}" )
   if (se) ret<-paste(round(mean(x),rnd), round(sd(x)/sqrt(length(x)),rnd), sep=" ± ") else
      ret<-paste(round(mean(x),rnd), round(sd(x),rnd), sep=" ± ")
   stem(x)
   if (se) ret1<-(c(paste0("mean ± se = ", ret), med)) else ret1<-(c(paste0("mean ± sd = ", ret), med))
   if (nospace) return(gsub(' ','', ret1)) else return(ret1)
}

.clip<-function(df, cp="copy", header=FALSE){
   if (cp=="copy")
{   clip <- pipe("pbcopy", "w")
    write.table(file = pipe("pbcopy"), df, row.names=FALSE, sep = "\t")}
   if (cp=="paste"){
      return(read.table(pipe("pbpaste"), sep="\t", header=header))
   }
}


 .plot<-function(marg=TRUE, ...) {
    if (marg) {par(mar=c(6,7.5,1,1))}
    plot(..., xlab="", ylab="", axes=F, type="n")
 }

 .plot(1,1)
 .addse<-function(x, y, se, length=.07){ arrows(x, y-se, x, y+se, code=3, angle=90, length=length)}
.plusmin<-function(x,rnd=1) {paste(round(x[,2],rnd), round(x[,3],rnd), sep=" ± ")}


.dpng<-function(file, wd="graphs", open=TRUE, overwrite=FALSE, png=TRUE){
      if (is.null(wd)) wd=getwd()
         ff<-paste(wd,"/",file,".pdf",sep="")
         ff<-gsub('//', '/', ff)  ## interior spaces
         ff<-gsub('.pdf.pdf', '.pdf', ff)
         if ((overwrite) || (!(file.exists(ff)))) dev.copy2pdf(file=ff) else
            if (overwrite) { print("File already exists.  Opening existing file.")
                ff<-paste(wd,"/",file,format(Sys.time(), "%Y%m%dhr%H"),".pdf",sep="_")
                dev.copy2pdf(file=ff)}
         if (open) browseURL(ff)
         if (png) {
               system(paste("mkdir '",wd, "png_version/'", sep=""))
               fn<-strsplit(ff, "/")[[1]][length(strsplit(ff, "/")[[1]])]
               pngpath<-paste(wd, "png_version/", sep="")
               x<-paste("sips -s format png '", ff, "' --out '", pngpath, substring(fn, 1, nchar(fn)-4), ".png'", sep="")
               system(x) }
}


.html_graph<-function(graphfilepng, caption=NULL, showfilename=TRUE){
   if (!is.null(caption) & showfilename) caption<-paste(caption, graphfilepng, sep="\n")
   if (is.null(caption) & showfilename) caption<-graphfilepng
   if (!is.null(caption) & !showfilename) caption<-"graph"
   HTMLInsertGraph(GraphFileName=graphfilepng,
   Caption=.wordwrap( paste("<h1>",caption, "</h1>", sep=""), 150), GraphBorder=0, Align="center", WidthHTML=800, HeightHTML=NULL, append=TRUE)
}


table = function (..., useNA = 'ifany') base::table(..., useNA = useNA)

.findanywhere<-function(x, df){
   dfc<-ncol(df)
   tmke<-data.frame()
   for (i in 1:dfc){
      tmp<-grep(x, as.character(df[,i]), ignore.case = TRUE)
      if (length(tmp)>0) {tmk<-data.frame(col=rep(i, length(tmp)), wh=tmp);
         tmke<-rbind(tmke, tmk )}
         }
   return(list(tmke[,2],unique(tmke[,1]),tmke, table(tmke$col), names(df)[unique(tmke$col)]))
}

.relevel<-function(x) as.factor(as.character(x))

.getrefs<-function(filename){
   require(readr)
   mystring <- read_file(filename)
   bparen<-regmatches(mystring, gregexpr("(?<=\\().*?(?=\\))", mystring, perl=T))[[1]]
   # regmatches(mystring, gregexpr("(?<=\\().*?(?=\\))", mystring, perl=T))[[1]]
   mtch<-gregexpr("(?<=\\().*?(?=\\))", mystring, perl=T)
   #attr(mtch[[1]], "match.length")
   # regmatches(mystring, gregexpr("(?<=[A-Z]).*?(?=\\())", mystring, perl=T))
   bparen1<-bparen[grep("[0-9][0-9][0-9][0-9]",bparen)]
   bparen2<-unlist(strsplit(bparen1, "; "))
   bparen3<-bparen2[grep("[0-9][0-9][0-9][0-9]",bparen2)]
   extras<-substring(mystring, mtch[[1]][which(nchar(bparen)==4)]-30, mtch[[1]][which(nchar(bparen)==4)]+4)
   extras_noparen<-gsub("\\)", "", gsub("\\(", "",extras))
   extras_noparen_firstcap<-substring(extras_noparen, sapply(gregexpr("[A-Z]", extras_noparen, perl=T), "[[", 1),100)
   all<-c(bparen3, extras_noparen_firstcap)
   all1<-   gsub("e.g., ", "", all)
   all1<-   gsub("e.g. ", "", all1)
   all1<-   gsub("but see ", "", all1)
   multiyears<-grep("[0-9][0-9][0-9][0-9], [0-9][0-9][0-9][0-9]", all1)

   all2<-all1[-multiyears]

   addmulti<-c(substring(all1[multiyears],1, sapply(gregexpr(",", all1[multiyears], perl=T), "[[", 1)-1),
      paste(substring(all1[multiyears],1, sapply(gregexpr(",", all1[multiyears], perl=T), "[[", 1)-6),
      substring(all1[multiyears], sapply(gregexpr(",", all1[multiyears], perl=T), "[[", 1)+2, 100)))

   return(sort(unique(c(all2, addmulti))))
}





.openwd<-function(){browseURL(getwd())}

.bu<-function(x=getwd()){ browseURL(eval(gsub("[[:space:]]", "%20", x))) }

.bmaster<-function(file, open=TRUE){  #assumes a global "master" df
   str<-paste(getwd(), master[file,1], sep="/")
   if (open) browseURL(eval(gsub("[[:space:]]", "%20", str))) else master[file,1]
#    print(str)
}

#source("/Users/jeff/Documents/R_drawing/hajek biocontrol figure 1 apparent competition/arrdiag_function.r")

library(igraph)
library(dplyr)
.curvedarrow<-function(x, y, ang=NULL, angoff=20, ce=c(20,20), col=4, wi=2, cu=-.75, circo=1, dir=TRUE, lwd=3, sh.lty=1, h.lty=1){
   require(igraph)
   iArrows <- igraph:::igraph.Arrows
   if (length(ce)==1) ce<-c(ce,ce)
   if (length(circo==1)) circo<-c(circo, circo)
   rad=ce/12
   allang<-seq(0,2*pi,.001)
   for (i in 1:2) {points( x[i]+(cos(allang)*rad[i]), y[i]+(sin(allang)*rad[i]), type="l",
         col=circo[i], lwd=lwd)}
   angle<-(atan((y[2]-y[1])/(x[2]-x[1])))/(pi/180)
   if (is.null(ang))
      if (cu<0) ang<-c(angle-angoff, angle+180+angoff) else ang<-c(angle+angoff, angle+180-angoff)
   (x1<-x+(cos(ang*(pi/180))*rad))
   (y1<-y+(sin(ang*(pi/180))*rad))
   if (dir) use<-c(x1[1], y1[1], x1[2], y1[2]) else {use<-c(x1[2], y1[2], x1[1], y1[1]); cu<-(-cu)}
   iArrows(use[1],use[2],use[3],use[4],
          h.lwd=wi, sh.lwd=wi, sh.col=col,
          curve=cu, width=1.5, size=1.2,  sh.lty=sh.lty, h.lty=h.lty)
}

.clean<-function(vect) {
   x <- as.character(vect)
   x <- tolower(x)
   x <-  gsub(' +$', '', x)  ## trailing spaces only
   x <-  gsub("([0-9])([a-zA-Z])","\\1_\\2",x) #backreferencing (see: http://stackoverflow.com/questions/11605564/r-regex-gsub-separate-letters-and-numbers)
   x <-  gsub(' +$', '', x)  ## trailing spaces only
   x <- gsub("[[:punct:]]", " ", x)
   x <-  gsub(' +', '_', x)  ## interior spaces
   x <-  gsub('_+', '_', x)  ## interior spaces
   x <-  gsub('\\.', '_', x)  ## interior spaces
   x <-  gsub('__', '_', x)  ## interior spaces
   x <-  gsub('&+', 'and', x)
   x <-  gsub('\\(', '', x)
   x <-  gsub('\\)', '', x)
  return(x)}

.auths<-function(x){ #author order for endnote
#x<-"Matthew M. McConnachie1*, Brian W. van Wilgen1, David M. Richardson1, Paul J. Ferraro2 and Aurelia T. Forsyth"
# .clean
   x<-gsub(", and ", ",", x, ignore.case = TRUE)
   x<-gsub(" and, ", ",", x, ignore.case = TRUE)
   x<-gsub(" and ", ",", x, ignore.case = TRUE)
   x<-gsub("&", ",", x)
   x <-  gsub(' +$', '', x)  ## trailing spaces only
   x <-  gsub(' ,', ',', x)  ## trailing spaces only
   x <-  gsub(', ', ',', x)  ## trailing spaces only
   x <- gsub("(^[[:space:]]+|[[:space:]]+$)", "", x)
   x <-gsub("[0-9],[0-9]", "", x, perl=T)
   x <-gsub("[[:digit:]]", "", x, perl=T)
   x <- gsub("([0-9]+)", "", x)
   x <- gsub("[^[:alnum:][:blank:],.;+?&/\\-]", "", x)
   while (length(grep(",,", x))>0) x <- gsub(",,", ",", x)
   x <- data.frame(full=unlist(strsplit(x, ",")), stringsAsFactors=F)
   x$full<-as.character(x$full)
   xx<-strsplit(x$full, " ")

   l<-unlist(lapply(xx, function(x) length(x)))
sink("outfile.txt")
   for (i in 1:length(xx)){
      xx<-lapply(xx, function(x) paste(toupper(substring(x,1,1)), tolower(substring(x,2,100)), sep=""))
      if (any(xx[[i]] %in% c("van", "vander"))) lst<-which(xx[[i]] %in% c("van", "vander")) else lst<-l[i]
      last<-paste(xx[[i]][lst:l[i]], collapse=" ")
      last <- gsub("(^[[:space:]]+|[[:space:]]+$)", "", last)
      firstmiddle<-paste(xx[[i]][1:(lst-1)], collapse=" ")
      firstmiddle <- gsub("(^[[:space:]]+|[[:space:]]+$)", "", firstmiddle)
      hyp<-(gregexpr(pattern ='-',last)[[1]][1])
      last<-paste(substring(last, 1,hyp),
      toupper(substring(last, hyp+1,hyp+1 )),
      substring(last, hyp+2,100), sep="" )
      tmp<-paste(last, ", ", firstmiddle, sep="")
      cat(tmp)
      cat("\n")
   }
while (sink.number()>0) sink()
file.show("outfile.txt")
   }

.polygon<-function(xleft, xright, bottom, top, col="gray70", border=1){
   x1<-c(xleft, xright, xright, xleft, xleft)
   y1<-c(rep(bottom,2), rep(top, 2), bottom)
   polygon(x1,y1, col=col, border=border)
}

.png<-function(file, wd=NULL, open=TRUE, overwrite=TRUE){
      if (is.null(wd)) wd=getwd()
         ff<-paste(wd,"/",file,".png",sep="")
         ff<-gsub('//', '/', ff)  ## interior spaces
         ff<-gsub('.png.png', '.png', ff)
         if (overwrite) png(file=ff, bg="transparent") else
            if (file.exists(ff)) print("File already exists.  Opening existing file.")
         if (open) browseURL(ff)
}

#oldversion
# .devpdf<-function(file, wd=NULL, open=TRUE, overwrite=FALSE, png=FALSE){
#       if (is.null(wd)) wd=getwd()
#          ff<-paste(wd,"/",file,".pdf",sep="")
#          ff<-gsub('//', '/', ff)  ## interior spaces
#          ff<-gsub('.pdf.pdf', '.pdf', ff)
#          if ((overwrite) || (!(file.exists(ff)))) dev.copy2pdf(file=ff) else
#             if (overwrite) { print("File already exists.  Opening existing file.")
#                 ff<-paste(wd,"/",file,format(Sys.time(), "%Y%m%dhr%H"),".pdf",sep="_")
#                 dev.copy2pdf(file=ff)}
#          if (open) browseURL(ff)
#          if (png) {
#                system(paste("mkdir '",wd, "png_version/'", sep=""))
#                fn<-strsplit(ff, "/")[[1]][length(strsplit(ff, "/")[[1]])]
#                pngpath<-paste(wd, "png_version/", sep="")
#                x<-paste("sips -s format png '", ff, "' --out '", pngpath, substring(fn, 1, nchar(fn)-4), ".png'", sep="")
#                system(x) }
# }


.rankabundance<-function(x, proportion=FALSE, orderby=NULL){
   par(mar=c(8,5,1,1))
   if (proportion) {
         if (is.null(orderby)) tmp_x<-sort(colSums(.pa(x))/nrow(x),decreasing=TRUE)
         if (!is.null(orderby)) tmp_x<-(colSums(.pa(x))/nrow(x))[orderby]
         yla=paste("Proportion of samples (n=",nrow(x),")", sep="")
            } else {
         if (is.null(orderby)) tmp_x<-sort(colSums(.pa(x)),decreasing=TRUE)
         if (!is.null(orderby)) tmp_x<-(colSums(.pa(x)))[orderby]
         yla=paste("# of samples where present (n=",nrow(x),")", sep="")
      }
   bp<-barplot(tmp_x, xlab="", ylab="", axes=F, axisnames=F)
   axis(1, las=2, label=names(tmp_x), at=bp, cex.axis=.6)
   axis(2, las=2)
   #mtext(side=2, line=2.6, paste("", sep=""), cex=1.4)
   mtext(side=2, line=2.6, yla, cex=1.4)
   box(bty="l")
}


.pool<-function(df, bulk){
   prov<-as.character(bulk[1]); from<-as.numeric(bulk[2]); to=as.numeric(bulk[3])
   fr=which(df$code==paste(prov, from, sep=""))
   t0=which(df$code==paste(prov, to, sep=""))
   tmp<-df[fr:t0,sapply(df, is.character)][0,]
  if  (sum(sapply(df, is.character))>0){
   for (j in 1:ncol(tmp)) { # j =1
      tmp[1,j]<-paste(sort(unique(df[fr:t0,sapply(df, is.character)][,j])), collapse="/")
   }
  }
     if (nrow(tmp)>0)  ret<-cbind(t(.adf(colMeans(df[fr:t0,sapply(df, is.numeric)]))), tmp)
     if (nrow(tmp)==0)  ret<-t(.adf(colMeans(df[fr:t0,sapply(df, is.numeric)])))
   return(ret)
}


.qb<-function(r=1,c=1, baseht=7, pardefault=TRUE){
   if(c>r) maxwidth<-12.5 else maxwidth<-7
   (w<-c/r*baseht)
   if (w>12.5) {w<-w*12.5/w; baseht<-baseht*12.5/w}
   h<-w*r/c*1.1
   if (h>baseht) {h<-h*baseht/h; w<-w*baseht/h}
   .qt(h, w)
   if (pardefault) par(ann=F, las=1, cex = 1.2, cex.axis = 1.25, cex.lab = 1.25, pch=20)
   .panes(r,c)
   return(c(h, w))
}



.ggplotreg <- function (fit) {

require(ggplot2)

ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
  geom_point() +
  stat_smooth(method = "lm", col = "red") +
  ggtitle(paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
                     "; Int. =",signif(fit$coef[[1]],5 ),
                     "; Slope =",signif(fit$coef[[2]], 5),
                     "; P =",signif(summary(fit)$coef[2,4], 5)))
}



.plotreg<-function(x, y, degree=1, lw=1.8,...){
   plot(x, y, pch=20)
   abline(t1<-lm(y~x), col=4, lw)
   nd<-data.frame(x=seq(min(x, na.rm=TRUE), max(x, na.rm=TRUE), length.out=200))
   if (degree==1)  ret=t1
   if (degree>1) { t2 <- lm(y ~ x + I(x^2))
            points(nd$x, predict(t2, nd), col = 2, type="l", lwd=lw)
            ret=list(t1, t2)
   }
   if (degree>2) { t3 <- lm(y ~ poly(x, 3, raw=TRUE))
                    points(nd$x, predict(t3, nd), col = 3, type="l", lwd=lw)
            ret=list(t1, t2, t3)
   }
   return(ret)
}

.pa<-function(x) {.columnnum(x, pa=T)}
.columnnum<-function(x, pa=FALSE){
  x<-x[sapply(x, is.numeric) ]
  if (pa) x[x>0]<-1
   return(x)
}
.toordinal<-function(x, char=TRUE){
   xx<-as.character(x)
   while (sum(nchar(xx)<max(nchar(xx)))>0)  xx[nchar(xx)<max(nchar(xx))]<-paste("0", xx[nchar(xx)<max(nchar(xx))], sep="")
   xxnum<-x/10^max(nchar(x))
   if (char) return(xx) else return(xxnum)
}


.l<-function(x){
   if (is.data.frame(x) | is.matrix(x)) ret<-nrow(x)
   if (is.vector(x)) ret<-length(x)
   return(ret)
}

.plot<-function(...) plot(..., xlab="", ylab="", axes=FALSE, type="n") ## imported

#Function to add a png
.drawpng <- function(label, image, x, y, ht, wd, ...) {
  require(png)
  require(grid)
   lab <- textGrob(label = label,
    x = unit(x, "npc"), y = unit(y, "npc"),
    just = c("left", "centre"), gp = gpar(...))
  logo <- rasterGrob(image = image,
    x = unit(x, "npc") + unit(1, "grobwidth", lab), y = unit(y, "npc"),
    width = unit(wd, "cm"), height = unit(ht, "cm"),
    just = c("left", "centre"), gp = gpar(...))
  grid.draw(lab)
  grid.draw(logo)
}


.reshape2wide<-function(dframe, newrows, newcolumns, valuecolumn){
    df=as.data.frame(dframe[,c(which(names(dframe) %in% newrows),
                               which(names(dframe) %in% newcolumns),
                               which(names(dframe) == valuecolumn))])
    dfwide<-reshape(df, timevar=newcolumns, idvar=newrows, direction="wide")
    return(dfwide)
}

.emplot<-function(x=1, y=1, yl=NULL) plot(x,y, type="n", axes=F, xlab="", ylab="", ylim=yl)

.mtxx<-function(x,y, line1=3, line2=3, cex=1.4){
 #opar<-par()
 par(las=0)
 mtext(side=1, x, line=line1, cex=cex)
 mtext(side=2, y, line=line2, cex=cex)
 #par(opar)
}

.axx<-function(x=T, y=T, box=T, cex.axis=1.3){  ## JGTools
 if (x) axis(1, cex.axis=cex.axis)
 if (y) axis(2, las=2,cex.axis=cex.axis)
 if (box) box(bty="L", lwd=2)
}


.codelevels<-function(dataset, colourfac=NULL, symbolfac=NULL, defsymbols=c(19,18,15, 17, 4, 1, 2, 6)){

  if (is.null(colourfac)){ colourfac1<-rep(1, length(colourfac)) } else {
      t_fac1=as.factor(colourfac)
      colourfac1<-rep(0, length(colourfac))
      lc<-length(levels(t_fac1))
      cols=rainbow(lc)
      for (i in 1:lc){colourfac1[colourfac==levels(t_fac1)[i]]<-cols[i]}
      }
  if (is.null(symbolfac)){ symbolfac1<-rep(1, length(symbolfac)) } else {
      t_fac2=as.factor(symbolfac)
      symbolfac1<-rep(0, length(symbolfac))
      lc2<-length(levels(t_fac2))
      symbols=defsymbols[1:lc2]
      for (j in 1:lc2){symbolfac1[symbolfac==levels(t_fac2)[j]]<-symbols[j]}
      }
  colsymb<-data.frame(cols=colourfac1, symb=symbolfac1)
  return(colsymb)

  .legend()



#   USAGE:
#    cls<-.codelevels(tmp, tmp$site, tmp$position)
#    .qt()
#    plot(tmp$mass~tmp$log_diam, pch=cls[,2], col=cls[,1])
}




.hsdorder<-function(hsdoutput, srt=NULL){
 #srt is not used -- currently sorting is alphabetical.  need to change
 #hsdoutput comes form package agricolae, function HSD.test (i.e. HSD.test(m_rgr, c("spp"), group=T))
 require(agricolae)
  h<-hsdoutput
  h$means$trt<-row.names(h$means)
  mergetable<- merge(h$means,h$groups, by=intersect(names(h$means), names(h$groups)))
 #current codes (cc)
 cc<-unlist(lapply(strsplit(as.character(mergetable$M), ""), "[[", 1))
  mergetable$sig.codes<-as.character(mergetable$trt)
  codes<-data.frame(old=unique(cc), new=sort(unique(cc)))
for (i in 1:length(mergetable$M)){
   change<-unlist(strsplit(as.character(mergetable$M[i]), ""))
   tmp<-vector()
   for (j in 1:length(change)){ #j=1
     tmp<-c(tmp, as.character(codes$new[which(change[j]==codes$old)]))
   }
  mergetable$sig.codes[i]<-paste(sort(tmp), sep="", collapse="")
}
return(mergetable)
}


.histo<-function(histobj, col="light grey", inverse=F, xlim=NULL, ylim=NULL, add=F, axes=T,
                xlab="", ylab="", freq=T, ysym=F)  {
  bre<-histobj$breaks; if (freq) den<-histobj$density else den<-histobj$counts
  if (inverse) den = -den
  if (is.null(xlim)) xlim=c(min(bre), max(bre))
  if (is.null(ylim)) ylim=c(min(den), max(den))
  if (ysym) ylim=1.9*c(-max(abs(den)), max(abs(den)))
  if (!(add)) plot(1, type="n", xlim=xlim, ylim=ylim, axes=axes, xlab=xlab, ylab=ylab)
  for (i in 1:(-1+length(histobj$breaks))){
  polygon(x=c(bre[i], bre[i], bre[i+1], bre[i+1]), y=c(0,den[i],den[i],0), col=col) }
  }


caic <- function(model) {

  sigma <- attr(VarCorr(model), 'sc')
	observed <- attr(model, 'y')
	predicted <- fitted(model)
	cond.loglik <- sum(dnorm(observed, predicted, sigma, log=TRUE))

	rho <- hatTrace(model)
	p <- length(fixef(model))
	N <- nrow(attr(model, 'X'))
	K.corr <- N*(N-p-1)*(rho+1)/((N-p)*(N-p-2)) + N*(p+1)/((N-p)*(N-p-2))

	CAIC <- -2*cond.loglik + 2*K.corr

	return(CAIC)

	}

.pd <- function(header=FALSE, aschar=T) {
  x <- read.table(pipe("pbpaste"), header=header)
  if (aschar) x <- as.data.frame(rapply(x, as.character, classes="factor", how="replace"), stringsAsFactors=F)
  if (ncol(x)==1) x <- as.vector(x[,1])
  return(x)}

.examplefile<-function(path2x) {
  library(png)
  x<-readPNG(path2x)
  .qt(8,8); plot(c(0, 1), c(0, 1), type = "n", xlab = "", ylab = "", axes=F)
  rasterImage(x, 0, 0, 1, 1, interpolate = TRUE)
}


.fac2char <- function(x) {
  x <- as.data.frame(rapply(x, as.character, classes="factor", how="replace"), stringsAsFactors=F)
  if (ncol(x)==1) x <- as.vector(x[,1])
  return(x)}

## setwd("/Users/Jeff/Documents/Rworkfile/")
## options(device='quartz')
.qt<-function(x,y){quartz(height=x, width=y); par(mar=c(5,6,1,1))}

.nn=function(x){as.numeric(as.vector(x))}

.adf=function(x){as.data.frame(x)}


.RSS=function(x){RSiteSearch(x)}
.panes=function(x,y){ par(mfrow=c(x,y))}
.nameslook <- function(x) .adf(names(x))

.fixednumber_old=function(prefix, tobeordered, seps="_"){
  ## Ex:  fixednumber("a", c("one","two", "three"))
  ## "a" will precede same-length numbering, "1,2,3" is the vector to be numbered
  l=length(tobeordered)
  numstr=1:l
  for (i in 1:(nchar(l)-1)){
    numstr[nchar(numstr)<nchar(l)]=paste("0", numstr[nchar(numstr)<nchar(l)], sep="")
  }
  paste(rep(prefix, l), numstr, seps, tobeordered, sep="")
}

# .fixednumber<-function(prefix, suffix, digits=NULL, suffappend=TRUE){
#    l=length(suffix)
#    numstr=1:l
#    numstr[nchar(numstr)==1]=paste(rep('0', length(numstr[nchar(numstr)==1])),numstr[nchar(numstr)==1], sep="")
#    numstr[nchar(numstr)==2]=paste(rep('', length(numstr[nchar(numstr)==2])),numstr[nchar(numstr)==2], sep="")
#    ret<-paste(rep(prefix, l), numstr, sep="")
#    if (!is.null(digits)) return(substring(nchar(ret[1])-digits+1,nchar(ret[1]), ret) ) else return(ret)
# }
#
.fixednumber<-function(prefix, suffix, digits=NULL, suffappend=TRUE){
   mx<-max(nchar(suffix))
   while (any(nchar(suffix)<mx)) {
       suffix[nchar(suffix)<mx] <- paste0("0", suffix[nchar(suffix)<mx])
   }
    return(paste0(prefix, suffix))
      }
#.fixednumber("IS", 1:51)










.ipg=function(x, repos=1) {
  if (repos==1) repo="http://cran.ru.ac.za/"
  if (repos==2) repo="http://cran.us.r-project.org"
  if (repos==3) repo=NULL
  if (!(x %in% installed.packages())) install.packages(x, repos=repo)
  else print("Package installed already")}

.fn=function(filename, dir=getwd(), ftype="pdf", date=FALSE){
   if (date) paste(dir, paste(filename, "_", format(Sys.time(), "%Y.%m.%d"),".", ftype, sep=""), sep="/")
   else paste(dir, paste(filename, ".", ftype, sep=""), sep="/")}

.fixednumber=function(prefix, suffix){
   l=length(suffix)
   numstr=1:l
   numstr[nchar(numstr)==1]=paste(rep('00', length(numstr[nchar(numstr)==1])),numstr[nchar(numstr)==1], sep="")
   numstr[nchar(numstr)==2]=paste(rep('0', length(numstr[nchar(numstr)==2])),numstr[nchar(numstr)==2], sep="")
   paste(rep(prefix, l), numstr,"_", suffix, sep="")
}


.cleannames=function(df) {
   x <- as.character(names(df))
   x <- tolower(x)
   x <-  gsub(' +$', '', x)  ## trailing spaces only
   x <-  gsub(' +', '_', x)  ## interior spaces
   x <-  gsub('_+', '_', x)  ## interior spaces
   x <-  gsub('\\.', '_', x)  ## interior spaces
   x <-  gsub('__', '_', x)  ## interior spaces
   x <-  gsub('&+', 'and', x)
   names(df)=x
  return(df)}

.wordwrap<-function(x,len) {
    ret<-c()
    for (i in 1:length(x)) { ret<-c(ret, paste(strwrap(x[i],width=len),collapse="\n"))}
    return(ret)
    }

.Caption <- function(x, wd=66) { .wordwrap(paste(caption,"Created: ",date(), "  Path: ", paste(getwd(),filename, sep="/"), "  By: ", thisfile), wd) }

#browseURL("/Users/Jeff/Documents/R/myfunctions/editR_function.R")


#     if (length(ls())>0)  myfuncs=ls(all = TRUE)[-which(ls(all=T) %in% ls())]
#     if (length(ls())==0) myfuncs=ls(all=T)
#   print(myfuncs)



.resetfac=function(x){
  for (i in 1:ncol(x)){
    if (is.factor(x[,i]))  x[,i]=x[,i][, drop=T]}
    return(x)
  }


.normalarea<-function(area=1, mean=0, sd=2, x=NULL){ #returns a data frame with normal curve x and y that integrates to area
   sdinput=sd
    i=1/area^.5
    sd=sd/i
   if (is.null(x)) x=seq(mean-4*sd, mean+4*sd, .01)
   normout<-data.frame(x, (1/(sd*sqrt(2*pi)))*exp(-(x-mean)^2/(2*sd^2))/i^2)
   return(normout)
}


print("# OTHER AVAILABLE FUNCTION TO LOAD (functionlist.r loaded)")

print(list.files(path="/Users/jeff/Dropbox/R/myfunctions/"))
